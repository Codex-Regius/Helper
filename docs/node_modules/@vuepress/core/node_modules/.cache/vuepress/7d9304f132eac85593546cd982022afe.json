{"remainingRequest":"/home/martin/Bureau/Helper/docs/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/martin/Bureau/Helper/docs/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/martin/Bureau/Helper/docs/node_modules/vue-loader/lib/index.js??ref--1-1!/home/martin/Bureau/Helper/docs/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/home/martin/Bureau/Helper/docs/src/linux/README.md?vue&type=template&id=0caabeca&","dependencies":[{"path":"/home/martin/Bureau/Helper/docs/src/linux/README.md","mtime":1613639259664},{"path":"/home/martin/Bureau/Helper/docs/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/martin/Bureau/Helper/docs/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/martin/Bureau/Helper/docs/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/martin/Bureau/Helper/docs/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/home/martin/Bureau/Helper/docs/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}